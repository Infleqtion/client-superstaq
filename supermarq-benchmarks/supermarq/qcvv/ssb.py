# Copyright 2021 The Cirq Developers
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
"""Tooling for Symmetric Stabilizer Benchmarking.
See https://arxiv.org/pdf/2407.20184
"""
from __future__ import annotations

import itertools
import random
from collections.abc import Iterable, Sequence
from dataclasses import dataclass, field

import cirq
import numpy as np
import pandas as pd
import scipy
import seaborn as sns
import tqdm
import tqdm.contrib
import tqdm.contrib.itertools

from supermarq.qcvv import BenchmarkingExperiment, BenchmarkingResults, Sample


@dataclass(frozen=True)
class SSBResults(BenchmarkingResults):
    """Results from an SSB experiment."""

    cz_fidelity_estimate: float
    """Estimated cycle fidelity."""
    cz_fidelity_estimate_std: float
    """Standard deviation for the cycle fidelity estimate."""

    experiment_name = "SSB"


class SSB(BenchmarkingExperiment[SSBResults]):
    """Symmetric Stabilizer Benchmarking
    """

    def __init__(
        self,
    ) -> None:
        """Args:
        single_qubit_gate_set: Optional list of single qubit gates to randomly sample
            from when generating random circuits. If not provided defaults to phased
            XZ gates with 1/4 pi intervals.
        two_qubit_gate: The two qubit gate to interleave between the single qubit gates. If
            None then no two qubit gate is used. Defaults to control-Z gate.
        """
        super().__init__(num_qubits=1)

    ###################
    # Private Methods #
    ###################
    def _build_circuits(
        self,
        num_circuits: int,
        cycle_depths: Iterable[int],
    ) -> Sequence[Sample]:
        """Build a list of random circuits to perform the SSB experiment with.

        Args:
            num_circuits: Number of circuits to generate.
            cycle_depths: An iterable of the different numbers of cycles to include in each circuit.

        Returns:
            The list of experiment samples.
        """

    def _process_probabilities(
        self, samples: Sequence[Sample]
    ) -> pd.DataFrame:
        """Processes the probabilities generated by sampling the circuits into the data structures
        needed for analyzing the results.

        Args:
            samples: The list of samples to process the results from.

        Returns:
            A data frame of the full results needed to analyse the experiment.
        """


    ###################
    # Public Methods  #
    ###################
    def analyze_results(self, plot_results: bool = True) -> SSBResults:
        """Analyse the results and calculate the estimated circuit fidelity.

        Args:
            plot_results (optional): Whether to generate the data plots. Defaults to True.

        Returns:
           The final results from the experiment.
        """

    def plot_results(self) -> None:
        """Plot the experiment data and the corresponding fits."""
