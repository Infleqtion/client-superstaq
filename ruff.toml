line-length = 100
target-version = "py39"
show-fixes = true

# Specific linting rules to enable in `ruff` (matching `pylint`'s "enable" list)
lint.select = [
    "A",      # flake8-builtins
    "ANN",    # flake8-annotations checks
    "ARG",    # Unused argument in a function/method
    "B",      # flake8-bugbear checks
    "C",      # Various flake8-c* checks
    "COM818", # trailing-comma-on-bare-tuple error
    "D",      # pydocstyle checks
    "E",      # pycodestyle checks
    "ERA",    # Commented-out code checks
    "F",      # pyflakes checks
    "FA",     # flake8-future-annotations checks
    "FAST",   # FastAPI checks
    "FLY",    # flynt checks
    "I",      # isort checks
    "ISC",    # flake8-implicit-str-concat checks
    "PERF",   # Perflint checks
    "PIE",    # flake8-pie checks
    "PL",     # pylint checks
    "PLE",    # pylint errors
    "PT001",  # pytest-fixture-incorrect-parentheses-style
    "PT009",  # pytest-unittest-assertion
    "PT013",  # pytest-incorrect-pytest-import
    "Q",      # flake8-quotes checks
    "RSE",    # flake8-raise checks
    "RUF010", # explicit-f-string-type-conversion
    "RUF022", # `__all__` is not sorted
    "RUF100", # unused noqa checks
    "SIM101", # Consider-merging-isinstance check
    "SIM210", # pylint's simplifiable-if-expression (1)
    "SIM211", # pylint's simplifiable-if-expression (2)
    "T10",    # flake8-debugger checks
    "T20",    # flake8-print checks
    "TC",     # flake8-type-checking checks
    "TID",    # flake8-tidy-imports
    "UP",     # pyupgrade checks
    "W",      # pycodestyle warnings checks
]
lint.ignore = [
    "ANN401",
    "ARG002",
    "ARG005",
    "B008",
    "B019",
    "B023",
    "B034",
    "B904",
    "B905",
    "C416",
    "C420",
    "D100",
    "D104",
    "D105",
    "D107",
    "D205",
    "D301",
    "FAST002",
    "PERF401",
    "PLC0105",
    "PLC0206",
    "PLR0911",
    "PLR0912",
    "PLR0913",
    "PLR0915",
    "PLR2004",
    "PLW0127",
    "PLW2901",
    "TC003",
    "UP038",
    # The following are excluded to not conflict with `ruff format`:
    "COM812",
    "COM819",
    "D206",
    "D300",
    "E111",
    "E114",
    "E117",
    "Q000",
    "Q001",
    "Q002",
    "Q003",
    "UP038",
    "W191",
]

# Allow autofix for all enabled rules (when `--fix` is passed)
lint.fixable = ["ALL"]
lint.unfixable = []

# Allow unused variables when underscore-prefixed
lint.dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[lint.flake8-type-checking]
exempt-modules = ["collections.abc"]

[format]
docstring-code-format = true

[lint.per-file-ignores]
"*.ipynb" = ["T201"]
"checks-superstaq/*" = ["T201"]
"*test.py" = ["D101", "D102", "D103"]
"docs/source/conf.py" = ["A001", "ANN001", "ANN201", "ARG001", "D103"]

[lint.pydocstyle]
convention = "google"
ignore-decorators = ["property", "classmethod", "staticmethod"]

[lint.mccabe]
max-complexity = 10

[lint.isort]
case-sensitive = false
